// Code generated by ogen, DO NOT EDIT.

package sp

import (
	"bytes"
	"io"
	"mime"
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

func decodeAuthResponse(resp *http.Response) (res AuthRes, _ error) {
	switch resp.StatusCode {
	case 302:
		// Code 302.
		var wrapper AuthFound
		h := uri.NewHeaderDecoder(resp.Header)
		// Parse "Location" header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "Location",
				Explode: false,
			}
			if err := func() error {
				if err := h.HasParam(cfg); err == nil {
					if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
						var wrapperDotLocationVal url.URL
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToURL(val)
							if err != nil {
								return err
							}

							wrapperDotLocationVal = c
							return nil
						}(); err != nil {
							return err
						}
						wrapper.Location.SetTo(wrapperDotLocationVal)
						return nil
					}); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "parse Location header")
			}
		}
		// Parse "Set-Cookie" header.
		{
			cfg := uri.HeaderParameterDecodingConfig{
				Name:    "Set-Cookie",
				Explode: false,
			}
			if err := func() error {
				if err := h.HasParam(cfg); err == nil {
					if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
						var wrapperDotSetCookieVal string
						if err := func() error {
							val, err := d.DecodeValue()
							if err != nil {
								return err
							}

							c, err := conv.ToString(val)
							if err != nil {
								return err
							}

							wrapperDotSetCookieVal = c
							return nil
						}(); err != nil {
							return err
						}
						wrapper.SetCookie.SetTo(wrapperDotSetCookieVal)
						return nil
					}); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "parse Set-Cookie header")
			}
		}
		return &wrapper, nil
	case 500:
		// Code 500.
		return &AuthInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeCallbackResponse(resp *http.Response) (res CallbackRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "text/html":
			reader := resp.Body
			b, err := io.ReadAll(reader)
			if err != nil {
				return res, err
			}

			response := CallbackOK{Data: bytes.NewReader(b)}
			var wrapper CallbackOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Set-Cookie" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Set-Cookie",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotSetCookieVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotSetCookieVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.SetCookie.SetTo(wrapperDotSetCookieVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Set-Cookie header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 500:
		// Code 500.
		return &CallbackInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeIndexResponse(resp *http.Response) (res IndexRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "text/html":
			reader := resp.Body
			b, err := io.ReadAll(reader)
			if err != nil {
				return res, err
			}

			response := IndexOK{Data: bytes.NewReader(b)}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 500:
		// Code 500.
		return &IndexInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

// Code generated by ogen, DO NOT EDIT.

package rp

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// Begin implements begin operation.
	//
	// Begin.
	//
	// GET /auth
	Begin(ctx context.Context, params BeginParams) (BeginRes, error)
	// Callback implements callback operation.
	//
	// Callback.
	//
	// GET /callback
	Callback(ctx context.Context, params CallbackParams) (CallbackRes, error)
	// End implements end operation.
	//
	// End.
	//
	// POST /auth
	End(ctx context.Context, req *EndReq) (EndRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
